// Èü≥È¢ëËÆæÁΩÆ
const ENABLE_AUDIO = true;  // ‰øùÊåÅÂêØÁî®Èü≥È¢ë

// Âè™‰øùÁïôËÉåÊôØÈü≥‰πê
const bgMusic = new Audio('data/audio/background.mp3');
bgMusic.loop = true;
bgMusic.volume = 0.3;

class Game {
    constructor() {
        // ‰ªé localStorage Ëé∑ÂèñÁé©ÂÆ∂‰ø°ÊÅØ
        const savedInfo = localStorage.getItem('playerInfo');
        if (!savedInfo) {
            window.location.href = '/';
            return;
        }

        const playerData = JSON.parse(savedInfo);
        this.playerInfo = {
            id: playerData.id,
            nickname: playerData.nickname,
            history: [],
            score: 0
        };

        this.inventory = new Set();
        this.initGame();
        this.initInventoryUI();

        // Ê∑ªÂä†Áâ©ÂìÅÂõæÁâáÊò†Â∞Ñ
        this.itemImages = {
            'Âè§Á±ç': 'book.png',
            'Á¨¶ÊñáÈí•Âåô': 'key.png',
            'ÈÄöË°åËØÅ': 'pass.png',
            'ÈáëÂ∏Å': 'gold.png',
            'ÂÆùÁü≥': 'gem.png',
            'Âè§ËÄÅÂç∑ËΩ¥': 'scroll.png',
            'Á•ûÁßòÊ≥ïÂô®': 'artifact.png',
            'Èæô‰πãÂÆùÁü≥': 'dragon-gem.png',
            'Âá§Âá∞ÁæΩÊØõ': 'feather.png',
            'È≠îÊ≥ïÊ∞¥Êô∂': 'crystal.png',
            'ÁèçÁè†': 'pearl.png',
            'Áéâ‰Ω©': 'jade.png',
            'Âè§Â∏Å': 'coin.png',
            'ÂÆùÁü≥ÊàíÊåá': 'ring.png',
            'ÊΩúÊ∞¥Ë£ÖÂ§á': 'diving.png'
        };

        // ÂàùÂßãÂåñÈü≥È¢ë
        this.soundEnabled = true;
        this.bgMusic = new Audio('/data/audio/background.mp3');
        this.bgMusic.loop = true;
        this.bgMusic.volume = 0.3;

        // Ê∑ªÂä†Èü≥È¢ëÈîôËØØÂ§ÑÁêÜ
        this.bgMusic.addEventListener('error', (e) => {
            console.warn('ËÉåÊôØÈü≥‰πêÂä†ËΩΩÂ§±Ë¥•:', e);
            this.soundEnabled = false;
        });
    }

    async initGame() {
        try {
            const response = await fetch('data/locations.txt');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.text();
            this.locations = this.parseLocationData(data);
            this.renderLocations();
        } catch (error) {
            console.error('Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•:', error);
            this.showMessage('Ê∏∏ÊàèÊï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØïÔºÅ');
        }
    }

    parseLocationData(data) {
        try {
            return data.split('\n').filter(line => line.trim()).map(line => {
                const parts = line.split('|');
                if (parts.length < 6) {
                    throw new Error(`Êï∞ÊçÆÊ†ºÂºè‰∏çÊ≠£Á°Æ: ${line}`);
                }
                const [name, description, hint, isAccessible, action, taskHint] = parts;
                return {
                    name,
                    description,
                    hint,
                    isAccessible: isAccessible === 'true',
                    action,
                    taskHint
                };
            });
        } catch (error) {
            console.error('Ëß£ÊûêÊï∞ÊçÆÂ§±Ë¥•:', error);
            throw error;
        }
    }

    renderLocations() {
        const gameContainer = document.getElementById('game-container');
        gameContainer.innerHTML = this.locations
            .map(location => `
                <div class="location ${location.isAccessible ? 'accessible' : 'locked'}"
                     onclick="game.handleLocationClick(${JSON.stringify(location).replace(/"/g, '&quot;')})">
                    <h3>${this.escapeHtml(location.name)}</h3>
                    <p>${this.escapeHtml(location.description)}</p>
                    <p class="hint">${this.escapeHtml(location.hint)}</p>
                    ${location.isAccessible ? 
                        `<p class="task-hint">${this.escapeHtml(location.taskHint)}</p>` : 
                        '<p class="locked-message">üîí ÊöÇÊú™Ëß£ÈîÅ</p>'}
                    ${this.getLocationStatus(location)}
                </div>
            `).join('');
    }

    generatePlayerId() {
        return 'player_' + Math.random().toString(36).substr(2, 9);
    }

    loadPlayerInfo() {
        const savedInfo = localStorage.getItem('playerInfo');
        if (savedInfo) {
            const info = JSON.parse(savedInfo);
            // ÊÅ¢Â§çËÉåÂåÖÁâ©ÂìÅ
            if (info.inventory) {
                this.inventory = new Set(info.inventory);
            }
            return info;
        }
        return null;
    }

    savePlayerInfo() {
        const playerData = {
            ...this.playerInfo,
            inventory: Array.from(this.inventory) // Â∞Ü Set ËΩ¨Êç¢‰∏∫Êï∞ÁªÑ‰øùÂ≠ò
        };
        localStorage.setItem('playerInfo', JSON.stringify(playerData));
    }

    addToHistory(action) {
        if (!this.playerInfo.history) {
            this.playerInfo.history = [];
        }
        this.playerInfo.history.push({
            action,
            timestamp: new Date().toISOString()
        });
        this.savePlayerInfo();
    }

    toggleMusic() {
        if (!this.soundEnabled) {
            this.showMessage('Èü≥È¢ëÂäüËÉΩÊú™ÂêØÁî®ÔºåËØ∑Á°Æ‰øùÈü≥È¢ëÊñá‰ª∂Â≠òÂú®');
            return;
        }

        try {
            if (this.bgMusic.paused) {
                this.bgMusic.play().then(() => {
                    this.showMessage('Èü≥‰πêÂ∑≤ÂºÄÂêØ');
                }).catch(e => {
                    console.warn('Êí≠ÊîæÂ§±Ë¥•:', e);
                    this.showMessage('ÁÇπÂáªÊí≠ÊîæÊåâÈíÆÊù•ÂêØÁî®Èü≥‰πê');
                });
            } else {
                this.bgMusic.pause();
                this.showMessage('Èü≥‰πêÂ∑≤ÊöÇÂÅú');
            }
        } catch (error) {
            console.warn('Èü≥‰πêÊéßÂà∂Â§±Ë¥•:', error);
        }
    }

    async handleLocationClick(location) {
        if (!location.isAccessible) {
            this.showMessage('Ëøô‰∏™Âú∞ÁÇπÊöÇÊó∂Êó†Ê≥ïËÆøÈóÆÔºÅ');
            return;
        }

        try {
            const result = await this[location.action](location);
            if (result) {
                this.addToHistory(`Âú®${location.name}ÂÆåÊàê‰∫Ü‰ªªÂä°Ôºö${result}`);
                this.updateLocations(location);
                await this.saveScore();  // ‰øùÂ≠òÂàÜÊï∞
            }
        } catch (error) {
            console.error('‰ªªÂä°ÊâßË°åÂ§±Ë¥•:', error);
            this.showMessage('‰ªªÂä°Â§±Ë¥•ÔºåËØ∑ÈáçËØïÔºÅ');
        }
    }

    async findBook() {
        const result = await this.showPuzzle('‰π¶Êû∂ÂØÜÁ†Å', 
            'ÊâæÂà∞‰∏Ä‰∏™ÂÜôÁùÄÊï∞Â≠óÁöÑÁ∫∏Êù°Ôºö1-3-5ÔºåËøôÂèØËÉΩÊòØÊâìÂºÄ‰π¶Êû∂ÁöÑÂØÜÁ†Å...',
            async (answer) => answer === '135'
        );
        
        if (result) {
            this.addToInventory('Âè§Á±ç');
            this.showMessage('‰Ω†ÊâæÂà∞‰∫Ü‰∏ÄÊú¨Á•ûÁßòÁöÑÂè§Á±çÔºÅ‰π¶‰∏≠ËÆ∞ËΩΩÁùÄÂÖ≥‰∫éÁ•ûÂ∫ôÁöÑÁßòÂØÜ...', 3000);
            return 'ÊâæÂà∞Âè§Á±ç';
        }
    }

    async solvePuzzle() {
        if (!this.inventory.has('Âè§Á±ç')) {
            this.showMessage('ÈúÄË¶ÅÂÖàÂú®Âõæ‰π¶È¶ÜÊâæÂà∞Âè§Á±çÔºÅ');
            return;
        }

        const result = await this.showPuzzle('Á¨¶ÊñáË∞úÈ¢ò',
            'Âè§Á±ç‰∏äËÆ∞ËΩΩÔºö‰∏úÂçóË•øÂåóÔºå‰æùÊ¨°ÁÇπ‰∫ÆÁ¨¶Êñá„ÄÇÊèêÁ§∫ÔºöÁî®Ëã±ÊñáÂ≠óÊØç E„ÄÅN„ÄÅS„ÄÅW Ë°®Á§∫ÊñπÂêë...',
            async (answer) => answer.toLowerCase() === 'ensw'
        );

        if (result) {
            this.addToInventory('Á¨¶ÊñáÈí•Âåô');
            this.showMessage('Á¨¶ÊñáÂèëÂá∫ËÄÄÁúºÁöÑÂÖâËäíÔºå‰Ω†Ëé∑Âæó‰∫ÜÁ¨¶ÊñáÈí•ÂåôÔºÅ', 3000);
            return 'Ëß£ÂºÄÁ¨¶ÊñáË∞úÈ¢ò';
        }
    }

    async negotiateGuard() {
        if (!this.inventory.has('Á¨¶ÊñáÈí•Âåô')) {
            this.showMessage('ÂÆàÂç´Êã¶‰Ωè‰∫Ü‰Ω†ÔºöÊ≤°ÊúâÁ¨¶ÊñáÈí•ÂåôÔºå‰∏çËÉΩÈÄöËøáÔºÅ');
            return;
        }

        await this.showProgress('Ê≠£Âú®‰∏éÂÆàÂç´‰∫§Ê∂â...', 3000);
        this.addToInventory('ÈÄöË°åËØÅ');
        this.showMessage('ÂÆàÂç´ÁúãÂà∞Á¨¶ÊñáÈí•ÂåôÔºåÊÅ≠Êï¨Âú∞‰∏∫‰Ω†ËÆ©ÂºÄ‰∫ÜÈÅìË∑Ø„ÄÇ', 3000);
        return 'Ëé∑ÂæóÂÆàÂç´ÁöÑ‰ø°‰ªª';
    }

    async searchTreasure() {
        if (!this.inventory.has('ÈÄöË°åËØÅ')) {
            this.showMessage('Ê≤°ÊúâÈÄöË°åËØÅÔºåÊó†Ê≥ïËøõÂÖ•ÂØÜÂÆ§ÔºÅ');
            return;
        }

        await this.showProgress('Ê≠£Âú®ÊêúÁ¥¢ÂÆùËóè...', 5000);
        const treasureTypes = ['ÈáëÂ∏Å', 'ÂÆùÁü≥', 'Âè§ËÄÅÂç∑ËΩ¥', 'Á•ûÁßòÊ≥ïÂô®'];
        const randomTreasure = treasureTypes[Math.floor(Math.random() * treasureTypes.length)];
        this.addToInventory(randomTreasure);
        this.showMessage(`ÊÅ≠ÂñúÔºÅ‰Ω†ÊâæÂà∞‰∫Ü‰º†ËØ¥‰∏≠ÁöÑÂÆùËóèÔºö${randomTreasure}ÔºÅ`, 5000);
        return `ÊâæÂà∞ÂÆùËóèÔºö${randomTreasure}`;
    }

    showMessage(text, duration = 3000) {
        const dialog = document.createElement('div');
        dialog.className = 'dialog-box';
        dialog.textContent = text;
        document.body.appendChild(dialog);
        setTimeout(() => dialog.remove(), duration);
    }

    async showPuzzle(title, hint, validateFn) {
        return new Promise((resolve) => {
            const dialog = document.createElement('div');
            dialog.className = 'dialog-box';
            dialog.innerHTML = `
                <h3>${title}</h3>
                <p>${hint}</p>
                <input type="text" placeholder="ËæìÂÖ•Á≠îÊ°à">
                <button>Á°ÆËÆ§</button>
            `;
            
            const input = dialog.querySelector('input');
            const button = dialog.querySelector('button');
            
            const checkAnswer = async () => {
                if (await validateFn(input.value)) {
                    dialog.remove();
                    resolve(true);
                } else {
                    this.showMessage('Á≠îÊ°à‰∏çÊ≠£Á°ÆÔºåËØ∑ÈáçËØïÔºÅ');
                }
            };
            
            // Ê∑ªÂä†ÂõûËΩ¶ÈîÆÊîØÊåÅ
            input.addEventListener('keypress', async (e) => {
                if (e.key === 'Enter') {
                    await checkAnswer();
                }
            });
            
            button.onclick = checkAnswer;
            
            document.body.appendChild(dialog);
            input.focus(); // Ëá™Âä®ËÅöÁÑ¶ËæìÂÖ•Ê°Ü
        });
    }

    async showProgress(text, duration) {
        return new Promise((resolve) => {
            const dialog = document.createElement('div');
            dialog.className = 'dialog-box';
            dialog.innerHTML = `
                <p>${text}</p>
                <div class="progress-bar">
                    <div class="progress-bar-fill" style="width: 0%"></div>
                </div>
            `;
            
            document.body.appendChild(dialog);
            
            const fill = dialog.querySelector('.progress-bar-fill');
            const startTime = Date.now();
            
            const updateProgress = () => {
                const elapsed = Date.now() - startTime;
                const progress = (elapsed / duration) * 100;
                
                if (progress < 100) {
                    fill.style.width = `${progress}%`;
                    requestAnimationFrame(updateProgress);
                } else {
                    dialog.remove();
                    resolve();
                }
            };
            
            requestAnimationFrame(updateProgress);
        });
    }

    updateLocations(completedLocation) {
        if (completedLocation.name === 'Âõæ‰π¶È¶Ü') {
            this.locations.find(l => l.name === 'Á•ûÂ∫ô').isAccessible = true;
        } else if (completedLocation.name === 'Á•ûÂ∫ô') {
            this.locations.find(l => l.name === 'ÂÆàÂç´Ëê•Âú∞').isAccessible = true;
        } else if (completedLocation.name === 'ÂÆàÂç´Ëê•Âú∞') {
            this.locations.find(l => l.name === 'ÂØÜÂÆ§').isAccessible = true;
        } else if (completedLocation.name === 'ÂØÜÂÆ§' && this.inventory.has('Á•ûÁßòÊ≥ïÂô®')) {
            this.locations.find(l => l.name === 'ËóèÂÆùÊ¥û').isAccessible = true;
            this.locations.find(l => l.name === 'Âè§‰∫ï').isAccessible = true;
        }
        
        this.renderLocations();
        this.savePlayerInfo();
    }

    // Ê∑ªÂä† HTML ËΩ¨‰πâÊñπÊ≥ï
    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    initInventoryUI() {
        const inventoryDiv = document.createElement('div');
        inventoryDiv.id = 'inventory';
        inventoryDiv.className = 'inventory-container';
        document.body.appendChild(inventoryDiv);
        this.updateInventoryUI();
    }

    updateInventoryUI() {
        const inventoryDiv = document.getElementById('inventory');
        inventoryDiv.innerHTML = `
            <h3>ËÉåÂåÖÁâ©ÂìÅ</h3>
            <div class="inventory-items">
                ${Array.from(this.inventory).map(item => `
                    <div class="inventory-item">
                        <img src="/images/items/${this.itemImages[item]}" alt="${item}">
                        <span>${this.escapeHtml(item)}</span>
                    </div>
                `).join('') || '<p>ËÉåÂåÖÊòØÁ©∫ÁöÑ</p>'}
            </div>
        `;
    }

    addToInventory(item) {
        this.inventory.add(item);
        this.updateInventoryUI();
        this.savePlayerInfo();
        this.saveScore();

        // ÊòæÁ§∫Ëé∑ÂæóÁâ©ÂìÅÁöÑÂä®Áîª
        const itemDialog = document.createElement('div');
        itemDialog.className = 'item-obtained';
        itemDialog.innerHTML = `
            <img src="/images/items/${this.itemImages[item]}" alt="${item}">
            <p>Ëé∑ÂæóÁâ©ÂìÅÔºö${item}</p>
        `;
        document.body.appendChild(itemDialog);
        setTimeout(() => itemDialog.remove(), 2000);
    }

    getLocationStatus(location) {
        if (location.name === 'Âõæ‰π¶È¶Ü' && this.inventory.has('Âè§Á±ç')) {
            return '<p class="completed">‚úÖ Â∑≤ÊâæÂà∞Âè§Á±ç</p>';
        }
        if (location.name === 'Á•ûÂ∫ô' && this.inventory.has('Á¨¶ÊñáÈí•Âåô')) {
            return '<p class="completed">‚úÖ Â∑≤Ëß£ÂºÄÁ¨¶Êñá</p>';
        }
        if (location.name === 'ÂÆàÂç´Ëê•Âú∞' && this.inventory.has('ÈÄöË°åËØÅ')) {
            return '<p class="completed">‚úÖ Â∑≤Ëé∑ÂæóÈÄöË°åËØÅ</p>';
        }
        return '';
    }

    // Ê∑ªÂä†‰∏éÂêéÁ´Ø‰∫§‰∫íÁöÑÊñπÊ≥ï
    async createPlayer() {
        try {
            const response = await fetch('/api/player', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id: this.playerInfo.id,
                    nickname: this.playerInfo.nickname
                })
            });
            const data = await response.json();
            console.log(data.message);
        } catch (error) {
            console.error('ÂàõÂª∫Áé©ÂÆ∂Â§±Ë¥•:', error);
        }
    }

    async saveScore() {
        try {
            const response = await fetch('/api/score', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    player_id: this.playerInfo.id,
                    score: this.calculateScore(),
                    items: Array.from(this.inventory)
                })
            });
            if (!response.ok) {
                throw new Error('‰øùÂ≠òÂàÜÊï∞Â§±Ë¥•');
            }
        } catch (error) {
            console.error('‰øùÂ≠òÂàÜÊï∞Â§±Ë¥•:', error);
        }
    }

    async loadPlayerHistory() {
        try {
            const response = await fetch(`/api/player/${this.playerInfo.id}`);
            if (!response.ok) {
                throw new Error('Âä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•');
            }
            const data = await response.json();
            return data.scores || [];
        } catch (error) {
            console.error('Âä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•:', error);
            return [];
        }
    }

    calculateScore() {
        let score = 0;
        const itemScores = {
            'Âè§Á±ç': 100,
            'Á¨¶ÊñáÈí•Âåô': 200,
            'ÈÄöË°åËØÅ': 300,
            'ÈáëÂ∏Å': 500,
            'ÂÆùÁü≥': 600,
            'Âè§ËÄÅÂç∑ËΩ¥': 700,
            'Á•ûÁßòÊ≥ïÂô®': 800,
            'Èæô‰πãÂÆùÁü≥': 1000,
            'Âá§Âá∞ÁæΩÊØõ': 1200,
            'ËøúÂè§Âç∑ËΩ¥': 1500,
            'È≠îÊ≥ïÊ∞¥Êô∂': 1800,
            'ÁèçÁè†': 400,
            'Áéâ‰Ω©': 600,
            'Âè§Â∏Å': 800,
            'ÂÆùÁü≥ÊàíÊåá': 1000,
            'ÊΩúÊ∞¥Ë£ÖÂ§á': 300
        };

        for (const item of this.inventory) {
            if (itemScores[item]) {
                score += itemScores[item];
            }
        }
        return score;
    }

    async exploreSecret() {
        if (!this.inventory.has('Á•ûÁßòÊ≥ïÂô®')) {
            this.showMessage('ÈúÄË¶ÅÁ•ûÁßòÊ≥ïÂô®ÊâçËÉΩËøõÂÖ•ËóèÂÆùÊ¥ûÔºÅ');
            return;
        }

        await this.showProgress('Ê≠£Âú®Êé¢Á¥¢ËóèÂÆùÊ¥û...', 4000);
        const secretItems = ['Èæô‰πãÂÆùÁü≥', 'Âá§Âá∞ÁæΩÊØõ', 'ËøúÂè§Âç∑ËΩ¥', 'È≠îÊ≥ïÊ∞¥Êô∂'];
        const randomItem = secretItems[Math.floor(Math.random() * secretItems.length)];
        this.addToInventory(randomItem);
        this.showMessage(`Âú®ËóèÂÆùÊ¥ûÊ∑±Â§ÑÔºå‰Ω†ÂèëÁé∞‰∫Ü${randomItem}ÔºÅ`, 3000);
        return `ÂèëÁé∞ÁßòÂÆùÔºö${randomItem}`;
    }

    async divingWell() {
        if (!this.inventory.has('ÊΩúÊ∞¥Ë£ÖÂ§á')) {
            const result = await this.showPuzzle('Ëé∑ÂèñÊΩúÊ∞¥Ë£ÖÂ§á', 
                'Âè§ËÄÅÁöÑÂïÜ‰∫∫ËØ¥ÔºöËß£ÂºÄËøô‰∏™Ë∞úËØ≠Â∞±Áªô‰Ω†ÊΩúÊ∞¥Ë£ÖÂ§á„ÄÇ\n"ÁôΩÂ§©ÊòØÁª≥Â≠êÔºåÊôö‰∏äÊòØÈì∂Ê≤≥ÔºåÂ§©‰∫ÆÊó∂‰∏çËßÅ„ÄÇ"',
                async (answer) => answer === 'ÊúàÂÖâ' || answer === 'Êúà‰∫Æ'
            );
            
            if (result) {
                this.addToInventory('ÊΩúÊ∞¥Ë£ÖÂ§á');
                this.showMessage('‰Ω†Ëé∑Âæó‰∫ÜÊΩúÊ∞¥Ë£ÖÂ§áÔºÅ');
            } else {
                return;
            }
        }

        await this.showProgress('Ê≠£Âú®ÊΩúÂÖ•Âè§‰∫ï...', 5000);
        const wellItems = ['ÁèçÁè†', 'Áéâ‰Ω©', 'Âè§Â∏Å', 'ÂÆùÁü≥ÊàíÊåá'];
        const randomItem = wellItems[Math.floor(Math.random() * wellItems.length)];
        this.addToInventory(randomItem);
        this.showMessage(`Âú®‰∫ïÂ∫ïÔºå‰Ω†ÊâæÂà∞‰∫Ü${randomItem}ÔºÅ`, 3000);
        return `ÊâìÊçûÂà∞Ôºö${randomItem}`;
    }
}

// ÂàõÂª∫ÂÖ®Â±ÄÊ∏∏ÊàèÂÆû‰æã
window.game = new Game(); 

// ÁßªÈô§È°µÈù¢ÁÇπÂáª‰∫ã‰ª∂ÁõëÂê¨Âô®ÔºåÂè™‰øùÁïôÊ∏∏ÊàèÂÆû‰æãÂàõÂª∫
window.game = new Game();

// ÁßªÈô§ DOMContentLoaded ‰∫ã‰ª∂ÁõëÂê¨Âô®‰∏≠ÁöÑÈü≥È¢ëÁõ∏ÂÖ≥‰ª£Á†Å
document.addEventListener('DOMContentLoaded', () => {
    const playerDetails = document.getElementById('player-details');
    playerDetails.innerHTML = `
        <p>ID: ${game.playerInfo.id}</p>
        <p>ÊòµÁß∞: ${game.playerInfo.nickname}</p>
    `;
    
    function updateHistory() {
        const historyList = document.getElementById('history-list');
        historyList.innerHTML = game.playerInfo.history
            .map(h => `<div>${new Date(h.timestamp).toLocaleString()} - ${h.action}</div>`)
            .join('');
    }
    updateHistory();
}); 